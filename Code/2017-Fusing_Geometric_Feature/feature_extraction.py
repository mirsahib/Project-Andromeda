# -*- coding: utf-8 -*-
"""exact1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WeuXodPvNo3AA2A4qlzSJzIvdPb3vNf3
"""

import csv
import numpy as np 
from scipy.spatial.distance import pdist
from google.colab import drive
drive.mount('/content/drive')

raw_2d=[]
frame_count=0
with open ('/content/drive/My Drive/Colab Notebooks/a01_s01_e01_skeleton.csv','r') as csv_file:
    csv_reader=csv.reader(csv_file)
    for line in csv_reader:
        raw_2d.append(line)
        frame_count=frame_count+1
    #2d array of joint    
    raw_2d=np.array(raw_2d)

#2d-> 3D array of joint
raw_3d_header=np.reshape(raw_2d,(55,20,3))
raw_3d=raw_3d_header[1:,:,:]
raw_3d=np.array(raw_3d,np.float32)

# all joint normalized with hip Centre (0 0 0)
joint_vector=raw_3d
#for i in range(frame_count-1):
   # for j in range(20):
       # joint_vector[i][j]=np.subtract(raw_3d[i][j],raw_3d[i][6])

# Both J1 and J2 are end site
line_endSite = np.array([[19,9],[19,10],[19,15],[19,16],[9,10],[9,15],[9,16],[10,15],[10,16],[15,16]],np.int8)

# distance between J1 and J2 are end site
jj_distance_raw=np.array([])
for i in range(frame_count-1):
    for j in range(10):
        k = []
        k.append(joint_vector[i][line_endSite[j][0]])
        k.append(joint_vector[i][line_endSite[j][1]])
        jj_distance_raw=np.append(jj_distance_raw,pdist(k))      
jj_distance=np.reshape(jj_distance_raw,(frame_count-1,10))

#2nd freature jj_orientation
jj_orientation=np.array([])
for i in range(frame_count-1):
    for j in range(10):
        jj_orientation=np.append(jj_orientation,(joint_vector[i][line_endSite[j][0]]-joint_vector[i][line_endSite[j][1]])/jj_distance[i][j])
               
jj_orientation=np.reshape(jj_orientation,(frame_count-1,10,3))

#joints that make plane
plane_joint=np.array([[0,7,9],[1,8,10],[19,2,3],[4,13,15],[5,14,16]])
jl_distance_raw=np.array([])
ll_angle=np.array([])
for i in range(frame_count-1):
    for j in range(5):
      

        a=np.array(joint_vector[i][plane_joint[j][0]])
        a=np.append(a,joint_vector[i][plane_joint[j][1]])
        a=a.reshape(2,3)
      
        b=np.array(joint_vector[i][plane_joint[j][1]])
        b=np.append(b,joint_vector[i][plane_joint[j][2]])
        b=b.reshape(2,3)

        c=np.array(joint_vector[i][plane_joint[j][0]])
        c=np.append(c,joint_vector[i][plane_joint[j][2]])
        c=c.reshape(2,3)

        dis_a=pdist(a)
        dis_b=pdist(b)
        dis_c=pdist(c)
       
        #height using heron's formulae
        h=np.sqrt(np.square(dis_a)-np.square((np.square(dis_c)+np.square(dis_a)-np.square(dis_b))/(2*dis_c)))
    
        jl_distance_raw=np.append(jl_distance_raw,h)

        #angle between line for 4th feature
        angle=np.arccos((np.square(dis_a)+np.square(dis_b)-np.square(dis_c))/(2*dis_a*dis_b))
        ll_angle=np.append(ll_angle,angle)


# 3rd feature joint line distance
jl_distance=np.reshape(jl_distance_raw,(frame_count-1,5))

#feature 4 line-line angle
ll_angle=np.reshape(ll_angle,(frame_count-1,5))

